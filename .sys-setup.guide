This file will contain a quick summary of various commands and steps that I've taken
to configure my desktop environment after installing Garuda.

Installing Garuda:
- Attempted to create a multi-boot usb to try out different versions.
- This didn't work out too well, so I ended up just making a simple boot drive 
  using the dd command.
- Surprisingly, the nvidia driver version of the live disk worked and I was able 
  to install this version. However, when I tried to boot into the system after 
  the install it would freeze on the boot screen and never get to login...
- As such, I had to reinstall, this time using the non-nvidia driver version of 
  the live boot disk. Now I could finally get into the system and log in.
- Note: I was able to very easily install garuda alongside EndeavourOS, so I can
  fall back if necessary... though I don't think that will be happening.

Go Through Garuda Assistant:
- This distro is very simple to get up and running...Using their assistant, you
  can very easily get most programs you'd want/need installed via a series of 
  prompts.
- Off the top of my head:
  firefox, libreOffice, thunderbird, gimp, japanese and asian language packs, 
  steam, lutris, wine and proton packages, discord, and I'm sure there were more.

Install Neovim:
- Install Neovim and xclip (to support shared clipboard between instances):    
    sudo pacman -Syu neovim xclip
- Note: for Garuda, xclip is not installed, but I still have a shared clipboard.
- Edit : ~/.config/nvim/init.vim and add the following:

set clipboard=unnamedplus         " use system clipboard for yanking/pasting
set ignorecase                    " Case insensitive searching
set hlsearch                      " Highlight search results
set incsearch                     " enable incremental searching
set showmatch                     " Show matching parenthesis
set mouse=v                       " Middle-click will paste clipboard
set mouse=a                       " Enable mouse clicking
set tabstop=4                     " Sets the number of columns occupied by a tab
set softtabstop=4                 " Sees multiple spaces as tabstops so that backspace works as expected
set expandtab                     " Converts tabs to white space
set shiftwidth=4                  " width for autoindents
set autoindent                    " indent a new line the same amount as the line just typed 
set number                        " add line numbers                                     
set wildmode=longest,list         " tab completion for vim commands                      
set cc=80                         " set an 80 column border                              
filetype plugin indent on         " Detects filetype -> attempts to load appropriate plugin for syntax highlighting for that filetype -> attempts to load appropriate indent file for that filetype.                                                                     
syntax on                         " Enables syntax highlighting.                         
set cursorline                    " Underlines the line your cursor is on.               
set ttyfast                       " Speed up scrolling in vim  

No need to worry about setting up timeshift, Garuda comes with Snapper and it
is already configured to take snapshots of your system every time you update.

No need to worry about NVidia drivers, these were already taken care of by the
Garuda Assistant.

Configuring /etc/fstab to mount additional drives permanently:
- Create mount points (must use sudo):
    sudo mkdir -p /media/backup /media/data /media/steam /media/media-server
- Give directories permissions to allow user/programs to read/write:
    sudo chmod -R a+rw /media
- Thankfully, this time around I'm coming from my EndeavourOS install, so no issues
  with drives. I was able to pretty much just copy with minor path alterations:

    # Internal Hard Drives
    UUID=d914e3ae-4691-4447-a0f1-41bec9f72d37 /media/data btrfs subvolid=256,defaults,noatime,compress=zstd 0 0

    UUID=5c47b54c-a915-4490-a35a-78041addd81a /media/backup btrfs subvolid=256,defaults,noatime,compress=zstd 0 0

    # Network File Shares
    192.168.1.108:/media_server           /media/media-server nfs defaults,nofail 0 0

- Note I'm waiting to add the Steam drive for now, plan is to reformat it after backing up saves.

Install OneDrive (for now...):
    yay -Syu onedrive-abraunegg onedrivegui-git
- Note: I really don't want the bloat of OneDrive... however I currently need
it to sync my keypass database file between devices.
- After creating profile, signing in with microsoft account, and syncing (this
didn't take too long since I already had OneDrive mostly up to date on my Data
drive), I setup OneDriveGUI to sync on start and made it start with the system.

For KDE, auto starting was as simple as 

    System Settings > Startup and Shutdown > Autostart > Add... 

- Lets make some sybollic links for quick access from home:
    ln -s /media/data/onedrive/ onedrive
    ln -s /media/data/ data
    ln -s /media/steam/ steam-drive
    ln -s /media/backup/ backup
    ln -s /media/media-server/ media-server
    ln -s onedrive/documents-personal/ documents
    ln -s onedrive/music/ music
    ln -s onedrive/pictures/ pictures
    ln -s onedrive/videos/ videos
    ln -s onedrive/scripts/ scripts

Install keepassXC and open the database file OneDrive:
    sudo pacman -Syu keepassxc

Prepare Backup Solution:
- First, we'll create a git repo and add to it user configuration files, in 
         particular: .gitignore, .bashrc, .config/nvim/ .config/qtile/, 
         .config/rofi/ and .config/.system-setup-notes.txt (this file).
         
        git init
        config --global user.email "miggy221@gmail.com"
        config --global user.name "Miguel Millan"
        git add <files>
        git commit -m "<message>"

- Next, we'll need to configure the git credential manager and then push to the 
        the remote (https://github.com/mjmillan/ComputerSettups, the linux branch)
        
        git config --global credential.helper 'store --file ~/.my-credentials'
        git remote add origin https://github.com/mjmillan/ComputerSetups
        git checkout -b 'garuda-linux'
        git push --set-upstream origin garuda-linux
        <enter credentials>

- Now, create rdiff-backup script to handle backing up the home and important 
    directories to the backup drive.

    pacman -Syu rdiff-backup
    rdiff-backup --verbosity 6 --include-globbing-filelist /home/miguel/scripts/backup-include-exclude-list.txt / /media/backup/garuda

  Directories of interest:
    - /etc, /home, /root, /var, /srv, /opt (exclude discord)

Install Plex Desktop:
    yay -Syu plex-desktop
- You'll need to sign to plex.tv -> use entry in password manager (we used email).

Create symbolic links to folder in OneDrive using the following commands:
ln -s onedrive/<folder>/ <folder in home>


